# To use this code, make sure you
#
#     import json
#
# and then, to convert JSON from a string, do
#
#     result = generator_from_dict(json.loads(json_string))
# This script was generated by  https://app.quicktype.io/

from typing import List, Any, Optional, Dict, TypeVar, Callable, Type, cast
import json

T = TypeVar("T")


def from_list(f: Callable[[Any], T], x: Any) -> List[T]:
    assert isinstance(x, list)
    return [f(y) for y in x]


def from_str(x: Any) -> str:
    assert isinstance(x, str)
    return x


def from_int(x: Any) -> int:
    assert isinstance(x, int) and not isinstance(x, bool)
    return x


def from_none(x: Any) -> Any:
    assert x is None
    return x


def from_union(fs, x):
    for f in fs:
        try:
            return f(x)
        except:
            pass
    assert False


def to_class(c: Type[T], x: Any) -> dict:
    assert isinstance(x, c)
    return cast(Any, x).to_dict()


def from_dict(f: Callable[[Any], T], x: Any) -> Dict[str, T]:
    assert isinstance(x, dict)
    return {k: f(v) for (k, v) in x.items()}


class Announce:
    muxes: List[str]
    origin: int

    def __init__(self, muxes: List[str], origin: int) -> None:
        self.muxes = muxes
        self.origin = origin

    @staticmethod
    def from_dict(obj: Any) -> "Announce":
        assert isinstance(obj, dict)
        muxes = from_list(from_str, obj.get("muxes"))
        origin = from_int(obj.get("origin"))
        return Announce(muxes, origin)

    def to_dict(self) -> dict:
        result: dict = {}
        result["muxes"] = from_list(from_str, self.muxes)
        result["origin"] = from_int(self.origin)
        return result


class Round:
    announce: Optional[List[Announce]]
    withdraw: Optional[List[str]]

    def __init__(
        self,
        announce: Optional[List[Announce]] = None,
        withdraw: Optional[List[str]] = None,
    ) -> None:
        self.announce = announce
        self.withdraw = withdraw

    @staticmethod
    def from_dict(obj: Any) -> "Round":
        assert isinstance(obj, dict)
        if obj["announce"]:
            announce = from_union(
                [lambda x: from_list(Announce.from_dict, x), from_none],
                obj.get("announce"),
            )
        if obj["withdraw"]:
            withdraw = from_union(
                [lambda x: from_list(from_str, x), from_none], obj.get("withdraw")
            )
        return Round(announce, withdraw)

    def to_dict(self) -> dict:
        result: dict = {}
        if self.announce:
            result["announce"] = from_union(
                [lambda x: from_list(lambda x: to_class(Announce, x), x), from_none],
                self.announce,
            )
        if self.withdraw:
            result["withdraw"] = from_union(
                [lambda x: from_list(from_str, x), from_none], self.withdraw
            )
        return result


class Experiment:
    description: str
    email: str
    rounds: List[Dict[str, Round]]

    def __init__(
        self, description: str, email: str, rounds: List[Dict[str, Round]]
    ) -> None:
        self.description = description
        self.email = email
        self.rounds = rounds

    @staticmethod
    def from_dict(obj: Any) -> "Experiment":
        assert isinstance(obj, dict)
        description = from_str(obj.get("description"))
        email = from_str(obj.get("email"))
        rounds = from_list(lambda x: from_dict(Round.from_dict, x), obj.get("rounds"))
        return Experiment(description, email, rounds)

    def to_dict(self) -> dict:
        result: dict = {}
        result["description"] = from_str(self.description)
        result["email"] = from_str(self.email)
        result["rounds"] = from_list(
            lambda x: from_dict(lambda x: to_class(Round, x), x), self.rounds
        )
        return result


class Generator:
    experiment: Experiment

    def __init__(self, experiment: Experiment) -> None:
        self.experiment = experiment

    @staticmethod
    def from_dict(obj: Any) -> "Generator":
        assert isinstance(obj, dict)
        experiment = Experiment.from_dict(obj.get("experiment"))
        return Generator(experiment)

    def to_dict(self) -> dict:
        result: dict = {}
        result["experiment"] = to_class(Experiment, self.experiment)
        return result


def generator_from_dict(s: Any) -> Generator:
    return Generator.from_dict(s)


def generator_to_dict(x: Generator) -> Any:
    return to_class(Generator, x)


# sample experiment generated in utils/experiment-example/experiment-1.json
announce1 = Announce(muxes=["amsterdam01"], origin=47065)
announce2 = Announce(muxes=["ufmg01"], origin=47065)
announce3 = Announce(muxes=["seattle01"], origin=47065)

rnd1 = Round(announce=[announce1])
rnd2 = Round(announce=[announce2])
rnd3 = Round(announce=[announce3])
# rnd4 = Round(withdraw=["ufmg01", "amsterdam01"])

exp = Experiment(
    description="Testing prefix propagation of muxes amsterdam01, ufmg01 and seattle01",
    email="noc@peering.ee.columbia.edu",
    rounds=[
        {"A": rnd1, "B": rnd1},
        {"A": rnd2, "B": rnd2},
        {"A": rnd3, "B": rnd3},
        # {"A": rnd4, "B": rnd4},
    ],
)

gen = Generator(exp)
result = json.dumps(generator_to_dict(gen))
print(result)
